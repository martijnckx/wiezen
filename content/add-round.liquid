---
layout: layouts/base
pagination:
    data: rounds
    size: 1
    alias: round
    addAllPagesToCollections: true
permalink: /add-round/{{ round.name | slugify }}/
eleventyComputed:
    meta:
        title: "Voeg een ronde {{ round.name | downcase }} toe aan je scorebord voor Wiezen"
        description: "De punten worden automatisch berekend volgens de officiÃ«le regels van IWWA."
---

<section>
    <h2>{{ round.name}}</h2>
    {% comment %}
    {% if round.canBePlayedSimultaneously %}
        <p class="warning">Meerdere spelers kunnen gelijktijdig {{ round.name }} spelen, maar dit kun je nog niet in 1 keer ingeven. Voeg een extra {{ round.name }} toe voor elke speler, dat klopt qua puntentelling.</p>
    {% endif %}
    {% endcomment %}
    <div class="field">
        <label for="names">Wie speelde {{ round.name | downcase }}?<span class="required">*</span></label>
    </div>
    <div class="player-list" data-players="{% if round.canBePlayedSimultaneously %}4{% else %}{{ round.amountOfPlayers }}{% endif %}">
        <div class="player-item">
            <label>
                <input type="checkbox" name="player" value="0">
                <span class="checkbox-custom"></span>
                <span class="name" id="player0">Speler 1</span>
            </label>
        </div>
        <div class="player-item">
            <label>
                <input type="checkbox" name="player" value="1">
                <span class="checkbox-custom"></span>
                <span class="name" id="player1">Speler 2</span>
            </label>
        </div>
        <div class="player-item">
            <label>
                <input type="checkbox" name="player" value="2">
                <span class="checkbox-custom"></span>
                <span class="name" id="player2">Speler 3</span>
            </label>
        </div>
        <div class="player-item">
            <label>
                <input type="checkbox" name="player" value="3">
                <span class="checkbox-custom"></span>
                <span class="name" id="player3">Speler 4</span>
            </label>
        </div>
    </div>
    <div class="field">
        <label for="tricks">Hoeveel slagen haalde{% if round.amountOfPlayers > 1 %}n ze{% else %} <span id="name">de speler</span>{% endif %}?</label>
        <select name="tricks" id="tricks">
            {% for i in (0..13) %}
                <option value="{{ i }}">{{ i }} {% if i == 1 %}slag{% else %}slagen{% endif %}</option>
            {% endfor %}
        </select>
    </div>
    <div class="simultaneous-round hidden">
        {% for i in (0..3) %}
            <div class="field tricks-for-player{{ i }}">
                <label for="tricks{{ i }}">Hoeveel slagen haalde <span class="player{{-i-}}-name">Speler {{ i }}</span>?</label>
                <select name="tricks{{ i }}" id="tricks{{ i }}">
                    {% for i in (0..13) %}
                        <option value="{{ i }}">{{ i }} {% if i == 1 %}slag{% else %}slagen{% endif %}</option>
                    {% endfor %}
                </select>
            </div>
        {% endfor %}
    </div>
    <button onclick="addRound()">Punten toevoegen</button>
</section>

<script>
    let round;
    function addRound() {
        const games = [];
        const playerIds = [];
        const players = document.querySelectorAll('input[type="checkbox"]:checked');
        Array.from(players).forEach(player => playerIds.push(parseInt(player.value)));

        if (round.canBePlayedSimultaneously && playerIds.length > 1) {
            for (const playerId of playerIds) {
                const tricks = parseInt(document.getElementById(`tricks${playerId}`).value);
                games.push({
                    attackers: [playerId],
                    tricks: tricks,
                });
            }
        } else {
            const tricks = parseInt(document.getElementById('tricks').value);
            games.push({
                attackers: playerIds,
                tricks: tricks,
            });
        }
        game.addRound(round.calculator, ...games);
        document.location = '/';
    }
    function updateNames() {
        for (let i = 0; i < game.players.length; i++) {
            document.getElementById(`player${i}`).innerText = game.players[i].name;
            document.querySelectorAll(`.player${i}-name`).forEach(name => name.innerText = game.players[i].name);
        }
    }
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const selectedCount = document.querySelectorAll('input[type="checkbox"]:checked').length;
            const maxPlayers = parseInt(document.querySelector('.player-list').dataset.players);

            if (selectedCount > round.amountOfPlayers) {
                document.querySelector('.simultaneous-round').classList.remove('hidden');
                document.querySelector('.field:has(#tricks)').classList.add('hidden');
            } else {
                document.querySelector('.simultaneous-round').classList.add('hidden');
                document.querySelector('.field:has(#tricks)').classList.remove('hidden');
            }

            if (selectedCount === 0 && round.amountOfPlayers === 1) {
                const nameSpan = document.getElementById('name');
                if (nameSpan) {
                    nameSpan.innerText = 'de speler';
                }
            }

            if (this.checked) {
                document.querySelector(`.tricks-for-player${this.value}`).classList.add('playing');
            } else {
                document.querySelector(`.tricks-for-player${this.value}`).classList.remove('playing');
            }

            if (!this.checked && selectedCount >= maxPlayers) {
                // Prevent selecting more than max players
                this.checked = false;
                return;
            }

            // Enable/disable checkboxes based on selection count
            checkboxes.forEach(cb => {
                if (cb.checked && round.amountOfPlayers === 1) {
                    const nameSpan = document.getElementById('name');
                    if (nameSpan) {
                        nameSpan.innerText = game.players[cb.value].name;
                    }
                }
                if (!cb.checked && selectedCount >= maxPlayers) {
                    cb.disabled = true;
                    cb.closest('label').classList.add('disabled');
                } else {
                    cb.disabled = false;
                    cb.closest('label').classList.remove('disabled');
                }
            });
        });
    });
    window.addEventListener('load', () => {
        updateNames();
        game.onChange(updateNames);

        round = rounds.find(round => round.name === '{{ round.name }}');
    });
</script>
