---
layout: layouts/base
---

<section>
    <h2>Grafiek</h2>
    <canvas id="history-chart"></canvas>
</section>

<section>
    <h2>Tabel</h2>
    <table>
        <thead>
            <tr>
                <th>Speler 1</th>
                <th>Speler 2</th>
                <th>Speler 3</th>
                <th>Speler 4</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>0</td>
                <td>0</td>
                <td>0</td>
                <td>0</td>
            </tr>
        </tbody>
    </table>
</section>

<section>
    <h2>Acties</h2>
    <button onclick="game.removeLastRound()">Verwijder meest recente spel</button>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('history-chart');
    let chart;

    function updateUi() {
        updateTable();
        updateChart();
    }

    function updateChart() {
        chart.data.labels = game.rounds.length > 0 ? ['Start'].concat(game.rounds) : [];
        chart.data.datasets = game.players.map((player, index) => {
            return {
                label: player.name,
                data: player.history.length > 0 ? [0].concat(player.history.map((round, index) => player.history.slice(0, index + 1).reduce((total, round) => total + round, 0))) : [],
                borderColor: ['#CD0300', '#00a5db', '#08cb5f', '#f1e02f'][index],
            };
        });
        chart.update();
    }
    
    function totalInRound(roundNumber, history) {
        return history.slice(roundNumber).reduce((total, round) => total + round, 0);
    }
    function updateTable() {
        console.log("Updating table");
        const tableElement = document.querySelector('table');
            tableElement.innerHTML = `<thead>
                <tr>
                    <th></th>
                    <th>${game.players[0].name}</th>
                    <th>${game.players[1].name}</th>
                    <th>${game.players[2].name}</th>
                    <th>${game.players[3].name}</th>
                </tr>
            </thead>
            <tbody>
                ${game.rounds.length > 0 ? game.rounds.slice().reverse().map((round, index) => `<tr>
                    <td>${round}</td>
                    <td>${totalInRound(index, game.players[0].history.slice().reverse())}</td>
                    <td>${totalInRound(index, game.players[1].history.slice().reverse())}</td>
                    <td>${totalInRound(index, game.players[2].history.slice().reverse())}</td>
                    <td>${totalInRound(index, game.players[3].history.slice().reverse())}</td>
                </tr>`).join('') : `
                    <tr>
                        <td></td>
                        <td>0</td>
                        <td>0</td>
                        <td>0</td>
                        <td>0</td>
                    </tr>
                `}
            </tbody>`;
    }
    window.addEventListener('load', () => {
        chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: game.rounds.length > 0 ? ['Start'].concat(game.rounds) : [],
                datasets: game.players.map((player, index) => {
                    return {
                        label: player.name,
                        data: player.history.length > 0 ? [0].concat(player.history.map((round, index) => player.history.slice(0, index + 1).reduce((total, round) => total + round, 0))) : [],
                        borderColor: ['#CD0300', '#00a5db', '#08cb5f', '#f1e02f'][index],
                    };
                }),
            },
            options: {
                responsive: true,
                plugins: {
                legend: {
                    position: 'bottom',
                },
                title: {
                    display: false,
                }
                }
            },
        });
        updateTable();
        game.onChange(updateUi);
    });
</script>
